/* Home or root page of our app. */

import React, { useState } from "react";

/*

import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";

export default function Home() {
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href='https://nextjs.org'>Next.js!</a>
        </h1>

        <p className={styles.description}>
          Get started by editing{" "}
          <code className={styles.code}>pages/index.js</code>
        </p>

        <div className={styles.grid}>
          <a href='https://nextjs.org/docs' className={styles.card}>
            <h2>Documentation &rarr;</h2>
            <p>Find in-depth information about Next.js features and API.</p>
          </a>

          <a href='https://nextjs.org/learn' className={styles.card}>
            <h2>Learn &rarr;</h2>
            <p>Learn about Next.js in an interactive course with quizzes!</p>
          </a>

          <a
            href='https://github.com/vercel/next.js/tree/master/examples'
            className={styles.card}>
            <h2>Examples &rarr;</h2>
            <p>Discover and deploy boilerplate example Next.js projects.</p>
          </a>

          <a
            href='https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app'
            className={styles.card}>
            <h2>Deploy &rarr;</h2>
            <p>
              Instantly deploy your Next.js site to a public URL with Vercel.
            </p>
          </a>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href='https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app'
          target='_blank'
          rel='noopener noreferrer'>
          Powered by{" "}
          <span className={styles.logo}>
            <Image src='/vercel.svg' alt='Vercel Logo' width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}

*/

// Using the useState Hook:
// Reference this hook in my import statement then use it at the top of the inputElement component.
// Use destructuring and return the state value and the setter function explicityly.
// HTML input fields support an onChange event that lets us assign a function that gets called every time the browser user types a key.
// The text input field that I've added an onChange event to can capture user's typed-in text as it changes.
// When the setInputText function gets called, updates state, and that state value gets reflected in the read-only veriable 'inputText'.
// Add the 'inputText' to the output with curly braces. We've completed the 2-ways data binding.
// Create a history of the text input changes and render that history to the page.
// On every input field change event, add to the historyList array the current value of the text field.
// We do that by calling the setHistoryList setter and we pass it an array which starts out by first speading the original historyList and then appending
// e.target.value which is the value typed in by user as the text box changes.
// Output the history array on every keystroke. A simple historyList with a map in our JSX-rendered output does this.
// A JS expression that maps over historyList and then renders each item of the historyList array. Now I have 2 state items being traked,
// inputText and the historyList array.
// In the UI I can now see not only the rendered text, but also the istory of the state changes.
const inputElement = () => {
  const [inputText, setInputText] = useState("");
  const [historyList, setHistoryList] = useState([]);
  return (
    <div>
      <input
        onChange={(e) => {
          setInputText(e.target.value);
          setHistoryList([...historyList, e.target.value]);
          {
            /* Speading the original historyList */
          }
          {
            /* setInputText updates the internal state of our useState call */
          }
        }}
        placeholder='Enter Some Text'
      />
      <br />
      {inputText}{" "}
      {/* Internal state is reflected in this variable 'inputText' which then gets output to the sreen.  */}
      <hr />
      <br />
      <ul>
        {/* Output the history array on every keystroke */}
        {historyList.map((rec) => {
          return <div>{rec}</div>;
        })}
      </ul>
    </div>
  );
};

export default inputElement;
